version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: telegram_analysis_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: telegram_analysis
      POSTGRES_USER: telegram_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U telegram_user -d telegram_analysis"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - telegram_network

  ollama:
    image: ollama/ollama:latest
    container_name: telegram_analysis_ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - telegram_network
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:11434/api/version || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  app:
    build: .
    container_name: telegram_analysis_app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_started
    # Wait for PostgreSQL to be ready before starting
    command: ["sh", "-c", "./wait-for-postgres.sh postgres 5432 telegram_user telegram_analysis \"$$POSTGRES_PASSWORD\" python app.py"]
    environment:
      # Database connection
      DB_URL: postgresql://telegram_user:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/telegram_analysis
      
      # Telegram API (from .env file)
      TELEGRAM_API_ID: ${TELEGRAM_API_ID}
      TELEGRAM_API_HASH: ${TELEGRAM_API_HASH}
      TARGET_CHAT_ID: ${TARGET_CHAT_ID}
      
      # Optional bot settings
      BOT_TOKEN: ${BOT_TOKEN:-}
      ADMIN_USER_IDS: ${ADMIN_USER_IDS:-}
      
      # Application settings
      TELETHON_SESSION_PATH: /app/data/telegram_session
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FILE: /app/logs/telegram_analysis.log
      
      # Analysis settings
      OVERLAP_MINUTES: ${OVERLAP_MINUTES:-120}
      BATCH_SIZE: ${BATCH_SIZE:-100}
      RATE_LIMIT_DELAY: ${RATE_LIMIT_DELAY:-1.0}
      MODEL_VERSION: ${MODEL_VERSION:-1}
      CONFIDENCE_THRESHOLD: ${CONFIDENCE_THRESHOLD:-0.7}
      
      # LLM settings
      OLLAMA_BASE_URL: http://ollama:11434
      OLLAMA_MODEL: llama3.2:3b
      OLLAMA_TIMEOUT: ${OLLAMA_TIMEOUT:-15}
      ENABLE_LLM_INSIGHTS: ${ENABLE_LLM_INSIGHTS:-true}
      
      # PostgreSQL password for wait script
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
    volumes:
      # Persistent data
      - session_data:/app/data
      - logs_data:/app/logs
      - model_cache:/root/.cache
      # Optional: mount config for easy updates
      - ./.env:/app/.env:ro
    networks:
      - telegram_network
    # Uncomment to expose health check endpoint
    # ports:
    #   - "8080:8080"

  # Optional: Database backup service
  backup:
    image: postgres:15-alpine
    container_name: telegram_analysis_backup
    restart: "no"
    depends_on:
      - postgres
    environment:
      POSTGRES_USER: telegram_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
      POSTGRES_DB: telegram_analysis
    volumes:
      - backup_data:/backup
      - ./scripts/backup.sh:/backup.sh:ro
    command: /bin/sh -c "chmod +x /backup.sh && /backup.sh"
    networks:
      - telegram_network
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  session_data:
    driver: local
  logs_data:
    driver: local
  model_cache:
    driver: local
  backup_data:
    driver: local
  ollama_data:
    driver: local

networks:
  telegram_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
